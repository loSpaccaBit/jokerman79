# ============================================================================
# JOKERMAN79 BACKEND ENVIRONMENT CONFIGURATION
# ============================================================================
# 
# This file contains all environment variables needed for the Jokerman79 
# Strapi backend. Copy this file to .env and update the values.
#
# SECURITY WARNING: Never commit the actual .env file to version control!
# 
# Quick setup:
# 1. Copy this file: cp .env.example .env
# 2. Generate secrets: npm run generate-secrets (if available) or use Node.js:
#    node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
# 3. Configure database connection
# 4. Set gaming provider credentials (optional for development)
#
# ============================================================================

# ============================================================================
# SERVER CONFIGURATION
# ============================================================================

# Server host and port
# HOST: Server bind address (0.0.0.0 allows external connections)
# PORT: Server port (default: 1337)
HOST=0.0.0.0
PORT=1337

# Node environment
# Values: development, production, test, staging
# Default: development
NODE_ENV=development

# ============================================================================
# SECURITY CONFIGURATION (REQUIRED)
# ============================================================================
# 
# All secrets MUST be changed from default values before deployment!
# Use strong, randomly generated secrets in production.
# 
# Generate secure secrets with:
# node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"

# Application keys (comma-separated, minimum 4 keys recommended)
# REQUIRED: Must be changed from default values
# Each key should be at least 32 characters long
APP_KEYS="CHANGE_ME_1,CHANGE_ME_2,CHANGE_ME_3,CHANGE_ME_4"

# API token salt for generating API tokens
# REQUIRED: Must be at least 16 characters, preferably 32+
API_TOKEN_SALT=CHANGE_ME_API_TOKEN_SALT_32_CHARS_MIN

# Admin JWT secret for admin authentication
# REQUIRED: Must be at least 16 characters, preferably 32+
ADMIN_JWT_SECRET=CHANGE_ME_ADMIN_JWT_SECRET_32_CHARS_MIN

# Transfer token salt for content transfer
# REQUIRED: Must be at least 16 characters, preferably 32+
TRANSFER_TOKEN_SALT=CHANGE_ME_TRANSFER_TOKEN_SALT_32_CHARS

# JWT secret for general JWT operations
# REQUIRED: Must be at least 16 characters, preferably 32+
JWT_SECRET=CHANGE_ME_JWT_SECRET_32_CHARACTERS_MINIMUM

# Encryption key for general encryption operations
# REQUIRED: Must be at least 16 characters, preferably 32+
ENCRYPTION_KEY=CHANGE_ME_ENCRYPTION_KEY_32_CHARS_MIN

# ============================================================================
# DATABASE CONFIGURATION (REQUIRED)
# ============================================================================

# Database client type
# Supported values: postgres, mysql, sqlite
DATABASE_CLIENT=postgres

# Database connection details
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=jokerman79_db
DATABASE_USERNAME=postgres
DATABASE_PASSWORD=your_db_password_here

# Database SSL configuration (recommended for production)
DATABASE_SSL=false

# Database schema (PostgreSQL only)
DATABASE_SCHEMA=public

# Alternative: Database connection string (overrides individual settings)
# DATABASE_URL=postgresql://username:password@hostname:port/database

# Database connection pool settings
DATABASE_POOL_MIN=2
DATABASE_POOL_MAX=10
DATABASE_CONNECTION_TIMEOUT=60000

# ============================================================================
# CORS AND NETWORK CONFIGURATION
# ============================================================================

# Frontend URL for CORS configuration
# IMPORTANT: Must use HTTPS in production, no localhost in production
FRONTEND_URL=http://localhost:3000

# Allowed CORS origins (comma-separated)
# Add all frontend domains that should access the API
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001

# Enable/disable CORS
CORS_ENABLED=true

# ============================================================================
# GAMING PROVIDER CONFIGURATION (OPTIONAL)
# ============================================================================
# 
# Configure gaming provider API credentials
# These are optional for development but required for live gaming features

# Evolution Gaming API credentials
# Required for live casino games integration
EVOLUTION_GAMING_USERNAME=your_evolution_username
EVOLUTION_GAMING_PASSWORD=your_evolution_password
EVOLUTION_GAMING_BASE_URL=https://your-domain.evo-games.com
EVOLUTION_GAMING_WS_URL=your-domain.evo-games.com/api/lobby/v1/your_username/live

# Pragmatic Play API credentials
# Required for slot games integration
PRAGMATIC_PLAY_API_KEY=your_pragmatic_api_key
PRAGMATIC_PLAY_BASE_URL=https://your-pragmatic-domain.com

# Enabled gaming providers (comma-separated)
GAMING_PROVIDERS_ENABLED=evolution,pragmatic

# ============================================================================
# LIVE STATS AND WEBSOCKET CONFIGURATION
# ============================================================================

# Enable WebSocket capture for live statistics
ENABLE_WEBSOCKET_CAPTURE=true

# Live stats WebSocket URL
LIVE_STATS_WS_URL=ws://localhost:3002/ws

# WebSocket connection settings
WEBSOCKET_HEARTBEAT_INTERVAL=30000
WEBSOCKET_RECONNECT_DELAY=5000
WEBSOCKET_MAX_RECONNECT_ATTEMPTS=5

# ============================================================================
# DATA RETENTION CONFIGURATION
# ============================================================================

# Data retention period for live stats
# Examples: 7days, 1month, 2weeks
DEFAULT_RETENTION_PERIOD=7days

# Cleanup job configuration
CLEANUP_INTERVAL_HOURS=1
MAX_CLEANUP_BATCH_SIZE=1000
ENABLE_AUTO_CLEANUP=true

# ============================================================================
# UPLOAD AND MEDIA CONFIGURATION
# ============================================================================

# Upload provider
# Values: local, aws-s3, cloudinary
UPLOAD_PROVIDER=local

# Upload limits
UPLOAD_MAX_FILE_SIZE=209715200
UPLOAD_ALLOWED_FORMATS=image/*,video/*,audio/*,application/pdf

# AWS S3 configuration (if using aws-s3 provider)
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key
# AWS_REGION=your_aws_region
# AWS_BUCKET=your_aws_bucket

# Cloudinary configuration (if using cloudinary provider)
# CLOUDINARY_CLOUD_NAME=your_cloud_name
# CLOUDINARY_API_KEY=your_api_key
# CLOUDINARY_API_SECRET=your_api_secret

# ============================================================================
# DEVELOPMENT CONFIGURATION
# ============================================================================
# 
# These settings are primarily for development and testing

# Enable development debugging
# DEBUG=strapi:*

# Development database (SQLite option)
# DATABASE_FILENAME=.tmp/data.db

# ============================================================================
# PRODUCTION CHECKLIST
# ============================================================================
# 
# Before deploying to production, ensure:
# 
# âœ… All secrets are changed from default values
# âœ… All secrets are at least 32 characters long
# âœ… DATABASE_SSL=true for PostgreSQL
# âœ… FRONTEND_URL uses HTTPS and production domain
# âœ… ALLOWED_ORIGINS contains only production domains
# âœ… Gaming provider credentials are configured
# âœ… Upload provider is configured (S3/Cloudinary for production)
# âœ… NODE_ENV=production
# âœ… No development/localhost URLs in production
# 
# Security recommendations:
# ðŸ”’ Use a secrets management service in production
# ðŸ”’ Rotate secrets regularly
# ðŸ”’ Enable database SSL/TLS
# ðŸ”’ Use environment-specific configurations
# ðŸ”’ Monitor and log security events
# 
# ============================================================================
