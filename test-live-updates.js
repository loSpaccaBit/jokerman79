const WebSocket = require('ws');

console.log('üß™ Testing Live Updates Flow...');

const ws = new WebSocket('ws://localhost:4000/ws');

let updateCount = 0;

ws.on('open', function open() {
    console.log('‚úÖ Connected to Casino Microservice');
    
    const subscribeMessage = {
        type: 'subscribe_game',
        provider: 'evolution',
        gameId: 'SpeedBlackjack04'
    };
    
    console.log('üì° Subscribing to Speed VIP Blackjack D (SpeedBlackjack04)...');
    ws.send(JSON.stringify(subscribeMessage));
});

ws.on('message', function message(data) {
    try {
        const parsed = JSON.parse(data);
        
        if (parsed.type === 'connection') {
            console.log('üîó Connection established with providers:', parsed.providers);
        } else if (parsed.type === 'subscription_success') {
            console.log('‚úÖ Successfully subscribed to live updates!');
            console.log('‚è±Ô∏è  Waiting 60 seconds for live messages...');
        } else if (parsed.type === 'game_update') {
            updateCount++;
            console.log(`üìä Live Update #${updateCount}:`, {
                provider: parsed.provider,
                gameId: parsed.gameId,
                messageType: parsed.data?.data?.type,
                tableId: parsed.data?.data?.tableId,
                timestamp: parsed.timestamp,
                hasResults: !!parsed.data?.data?.results,
                hasPlayers: !!parsed.data?.data?.players
            });
            
            if (parsed.data?.data?.type && parsed.data.data.type.endsWith('ResultsUpdated')) {
                console.log('üé≤ GAME RESULT DETECTED:', {
                    type: parsed.data.data.type,
                    tableId: parsed.data.data.tableId,
                    results: parsed.data.data.results || 'No results in message'
                });
            }
        } else if (parsed.type === 'error') {
            console.log('‚ùå Error:', parsed.message, parsed.details);
        } else {
            console.log('üì® Other message:', parsed.type);
        }
        
    } catch (error) {
        console.error('‚ùå Error parsing message:', error);
        console.log('Raw data:', data.toString());
    }
});

ws.on('close', function close() {
    console.log('üîå Connection closed');
    console.log(`üìä Total live updates received: ${updateCount}`);
    process.exit(0);
});

ws.on('error', function error(err) {
    console.error('‚ùå WebSocket error:', err);
    process.exit(1);
});

// Auto-close after 60 seconds
setTimeout(() => {
    console.log('‚è∞ Test complete - closing connection');
    console.log(`üìä Total live updates received: ${updateCount}`);
    
    if (updateCount === 0) {
        console.log('‚ö†Ô∏è  No live updates were received during the test period.');
        console.log('   This could be normal if the selected game had no activity.');
    } else {
        console.log('‚úÖ Live updates are working correctly!');
    }
    
    ws.close();
}, 60000);